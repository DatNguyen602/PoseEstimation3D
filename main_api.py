import os
import uuid
import shutil
import json
import uvicorn
import sys
import queue
import threading
import asyncio
from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks
from sse_starlette.sse import EventSourceResponse

# Import the pipeline function
from run_pipeline import run_full_pipeline

# --- C·∫•u h√¨nh th∆∞ m·ª•c ---
UPLOADS_DIR = "uploads"
OUTPUTS_DIR = "res/output"
os.makedirs(UPLOADS_DIR, exist_ok=True)
os.makedirs(OUTPUTS_DIR, exist_ok=True)

app = FastAPI(
    title="3D Pose Estimation API",
    description="API ƒë·ªÉ upload video v√† nh·∫≠n l·∫°i d·ªØ li·ªáu 3D pose, h·ªó tr·ª£ streaming ti·∫øn ƒë·ªô.",
    version="1.1.0"
)

# --- L·ªõp ti·ªán √≠ch ƒë·ªÉ b·∫Øt output t·ª´ pipeline ---
class QueueIO:
    """M·ªôt l·ªõp gi·∫£-file ƒë·ªÉ ghi stdout v√†o m·ªôt queue."""
    def __init__(self, q):
        self.q = q
    def write(self, s):
        # Ch·ªâ ƒë∆∞a c√°c chu·ªói kh√¥ng r·ªóng v√†o queue
        if s.strip():
            self.q.put(s)
    def flush(self):
        pass

# --- H√†m ch·∫°y pipeline trong m·ªôt thread ri√™ng ---
def run_pipeline_in_thread(video_path, output_dir, output_basename, result_queue):
    """Ch·∫°y pipeline v√† chuy·ªÉn h∆∞·ªõng stdout v√†o queue."""
    try:
        # Chuy·ªÉn h∆∞·ªõng stdout
        original_stdout = sys.stdout
        sys.stdout = QueueIO(result_queue)
        
        # Ch·∫°y pipeline
        result = run_full_pipeline(video_path, output_dir, output_basename)
        
        # ƒê∆∞a k·∫øt qu·∫£ cu·ªëi c√πng v√†o queue
        result_queue.put({"type": "result", "data": result})

    except Exception as e:
        import traceback
        error_str = traceback.format_exc()
        result_queue.put({"type": "error", "data": error_str})
    finally:
        # Kh√¥i ph·ª•c stdout v√† b√°o hi·ªáu k·∫øt th√∫c
        sys.stdout = original_stdout
        result_queue.put({"type": "done"})

# --- C√°c h√†m ti·ªán √≠ch cho API ---
def cleanup_files(files: list):
    """X√≥a m·ªôt danh s√°ch c√°c file."""
    print(f"üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp {len(files)} file... ")
    for file_path in files:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"üóëÔ∏è ƒê√£ x√≥a: {file_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp file {file_path}: {e}")

async def save_upload_file(upload_file: UploadFile) -> str:
    """L∆∞u file upload v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n."""
    request_id = str(uuid.uuid4())
    _, extension = os.path.splitext(upload_file.filename)
    if extension.lower() not in ['.mp4', '.mov', '.avi']:
        raise HTTPException(status_code=400, detail="ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá.")
    
    video_filename = f"{request_id}{extension}"
    video_path = os.path.join(UPLOADS_DIR, video_filename)

    try:
        with open(video_path, "wb") as buffer:
            shutil.copyfileobj(upload_file.file, buffer)
    finally:
        upload_file.file.close()
    
    print(f"üìπ ƒê√£ l∆∞u video v√†o: {video_path}")
    return video_path, request_id

# --- Endpoints API ---

@app.post("/process-video-stream/", 
          summary="Upload video v√† nh·∫≠n ti·∫øn tr√¨nh x·ª≠ l√Ω theo th·ªùi gian th·ª±c (SSE)")
async def process_video_stream(file: UploadFile = File(...) ):
    """    
    Upload video, ch·∫°y pipeline v√† stream ti·∫øn ƒë·ªô x·ª≠ l√Ω v·ªÅ cho client.
    - Client nh·∫≠n c√°c "log" event trong qu√° tr√¨nh x·ª≠ l√Ω.
    - Event "result" cu·ªëi c√πng s·∫Ω ch·ª©a d·ªØ li·ªáu JSON 3D.
    - Event "error" s·∫Ω ƒë∆∞·ª£c g·ª≠i n·∫øu c√≥ l·ªói x·∫£y ra.
    """
    video_path, request_id = await save_upload_file(file)
    
    async def event_generator():
        result_queue = queue.Queue()
        files_to_cleanup = [video_path]

        # Ch·∫°y pipeline trong m·ªôt thread kh√°c ƒë·ªÉ kh√¥ng block server
        pipeline_thread = threading.Thread(
            target=run_pipeline_in_thread,
            args=(video_path, OUTPUTS_DIR, request_id, result_queue)
        )
        pipeline_thread.start()

        try:
            while True:
                try:
                    # L·∫•y message t·ª´ queue (kh√¥ng blocking)
                    message = result_queue.get_nowait()
                    
                    if isinstance(message, dict):
                        # X·ª≠ l√Ω c√°c message ƒë·∫∑c bi·ªát (done, result, error)
                        if message["type"] == "done":
                            yield {"event": "done", "data": "Processing finished."}
                            break
                        elif message["type"] == "result":
                            final_json_path, generated_files = message["data"]
                            files_to_cleanup.extend(generated_files)
                            with open(final_json_path, 'r') as f:
                                json_data = json.load(f)
                            yield {"event": "result", "data": json.dumps(json_data)}
                        elif message["type"] == "error":
                            yield {"event": "error", "data": message["data"]}
                            break
                    else:
                        # G·ª≠i log ti·∫øn tr√¨nh
                        yield {"event": "log", "data": message}

                except queue.Empty:
                    # N·∫øu queue r·ªóng, ƒë·ª£i m·ªôt ch√∫t v√† ki·ªÉm tra thread c√≤n s·ªëng kh√¥ng
                    if not pipeline_thread.is_alive():
                        break
                    await asyncio.sleep(0.1)
        finally:
            # ƒê·∫£m b·∫£o thread k·∫øt th√∫c v√† d·ªçn d·∫πp file
            pipeline_thread.join()
            cleanup_files(files_to_cleanup)

    return EventSourceResponse(event_generator())

@app.post("/process-video/", 
          summary="Upload v√† x·ª≠ l√Ω video (Request/Response ƒë∆°n gi·∫£n)",
          deprecated=True) # ƒê√°nh d·∫•u l√† c≈©, khuy·∫øn kh√≠ch d√πng stream
async def process_video_simple(background_tasks: BackgroundTasks, file: UploadFile = File(...) ):
    video_path, request_id = await save_upload_file(file)
    files_to_cleanup = [video_path]
    try:
        result = run_full_pipeline(video_path, OUTPUTS_DIR, request_id)
        if result is None:
            raise HTTPException(status_code=500, detail="X·ª≠ l√Ω video th·∫•t b·∫°i.")
        final_json_path, generated_files = result
        files_to_cleanup.extend(generated_files)
        with open(final_json_path, 'r') as f:
            json_data = json.load(f)
        background_tasks.add_task(cleanup_files, files_to_cleanup)
        return json_data
    except Exception as e:
        background_tasks.add_task(cleanup_files, files_to_cleanup)
        raise HTTPException(status_code=500, detail=f"L·ªói n·ªôi b·ªô: {e}")

@app.get("/", summary="API Root", include_in_schema=False)
def read_root():
    return {"message": "Welcome to the 3D Pose Estimation API. Truy c·∫≠p /docs ƒë·ªÉ xem t√†i li·ªáu."}

if __name__ == "__main__":
    print("üöÄ Kh·ªüi ƒë·ªông FastAPI server...")
    print("Truy c·∫≠p http://127.0.0.1:8000/docs ƒë·ªÉ xem giao di·ªán API t∆∞∆°ng t√°c.")
    uvicorn.run(app, host="127.0.0.1", port=8000)